// Vercel API Test Component - Test your Vercel token integration
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { VercelClient, PortfolioDeploymentManager } from '../services/vercelService';
import { getVercelConfig } from '../config/apiConfig';
import { 
  CheckCircle, 
  XCircle, 
  Loader2, 
  Rocket, 
  Globe, 
  Settings,
  Upload,
  Download,
  Activity,
  Zap,
  Shield,
  Clock
} from 'lucide-react';

const VercelTestComponent = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [testResults, setTestResults] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);
  const [projectName, setProjectName] = useState('showwork-test-portfolio');

  const runVercelTests = async () => {
    setIsLoading(true);
    setError(null);
    setTestResults(null);

    try {
      const config = getVercelConfig();
      console.log('Using Vercel Config:', {
        token: config.token.substring(0, 10) + '...',
        teamId: config.teamId || 'Not configured',
        baseUrl: config.baseUrl
      });

      const vercelClient = new VercelClient(config);
      const deploymentManager = new PortfolioDeploymentManager(config);
      
      // Test 1: List Projects
      console.log('Testing Vercel Projects List...');
      const projects = await vercelClient.listProjects();
      console.log('Projects listed:', projects.length);

      // Test 2: Create Test Deployment
      console.log('Testing Vercel Deployment Creation...');
      const testFiles = [
        {
          file: 'index.html',
          data: `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ShowWork Test Portfolio</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #1E293B, #0F172A);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            text-align: center;
            max-width: 600px;
        }
        h1 { color: #3B82F6; margin-bottom: 20px; }
        p { color: #94A3B8; margin-bottom: 30px; }
        .badge {
            background: #1E3A8A;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            display: inline-block;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸš€ ShowWork Portfolio Test</h1>
        <p>This is a test deployment to verify Vercel integration with ShowWork's portfolio generation system.</p>
        <div class="badge">âœ… Vercel API Working</div>
        <div class="badge">âœ… Deployment Successful</div>
        <div class="badge">âœ… Portfolio Ready</div>
        <p style="margin-top: 30px; font-size: 14px; color: #6B7280;">
            Generated by ShowWork Portfolio Builder
        </p>
    </div>
</body>
</html>`
        },
        {
          file: 'package.json',
          data: JSON.stringify({
            name: 'showwork-test-portfolio',
            version: '1.0.0',
            description: 'Test portfolio for ShowWork Vercel integration',
            scripts: {
              build: 'echo "Build complete"'
            }
          })
        }
      ];

      const deployment = await vercelClient.createDeployment({
        name: projectName,
        files: testFiles,
        projectSettings: {
          framework: 'static',
          buildCommand: undefined,
          outputDirectory: '.',
          installCommand: undefined
        },
        target: 'preview',
        regions: ['iad1', 'sfo1']
      });

      console.log('Deployment created:', deployment.id);

      // Test 3: Wait for Deployment
      console.log('Waiting for deployment to complete...');
      const completedDeployment = await deploymentManager.waitForDeployment(deployment.id);
      console.log('Deployment completed:', completedDeployment.state);

      // Test 4: Get Deployment Status
      console.log('Getting deployment status...');
      const status = await vercelClient.getDeploymentStatus(deployment.id);
      console.log('Deployment status:', status.state);

      // Test 5: Test Custom Domain (if provided)
      let domainResult = null;
      if (projectName.includes('custom')) {
        try {
          console.log('Testing custom domain configuration...');
          domainResult = await deploymentManager.configureCustomDomain(
            completedDeployment.projectId,
            `${projectName}.vercel.app`
          );
        } catch (domainError) {
          console.log('Custom domain test failed:', domainError.message);
        }
      }

      setTestResults({
        projectsListed: projects.length,
        deploymentCreated: deployment,
        deploymentCompleted: completedDeployment,
        deploymentStatus: status,
        domainConfigured: domainResult,
        timestamp: new Date().toISOString()
      });

      console.log('All Vercel tests completed successfully!');

    } catch (error) {
      console.error('Vercel API test failed:', error);
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const testCustomProject = async () => {
    if (!projectName.trim()) return;
    
    setIsLoading(true);
    setError(null);

    try {
      const config = getVercelConfig();
      const vercelClient = new VercelClient(config);
      
      // Create deployment with custom project name
      const testFiles = [
        {
          file: 'index.html',
          data: `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${projectName} - ShowWork Test</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #8B5CF6, #3B82F6);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            text-align: center;
            max-width: 600px;
        }
        h1 { color: white; margin-bottom: 20px; }
        p { color: rgba(255,255,255,0.8); margin-bottom: 30px; }
        .project-name {
            background: rgba(255,255,255,0.2);
            padding: 10px 20px;
            border-radius: 10px;
            display: inline-block;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸŽ¨ Custom Project Test</h1>
        <div class="project-name">${projectName}</div>
        <p>This is a custom project deployment test for ShowWork's Vercel integration.</p>
        <p style="font-size: 14px; color: rgba(255,255,255,0.6);">
            Project: ${projectName}<br>
            Generated by ShowWork Portfolio Builder
        </p>
    </div>
</body>
</html>`
        }
      ];

      const deployment = await vercelClient.createDeployment({
        name: projectName,
        files: testFiles,
        projectSettings: {
          framework: 'static'
        },
        target: 'preview'
      });

      setTestResults({
        customProjectTest: {
          projectName,
          deployment,
          success: true
        },
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#1E293B] to-[#0F172A] p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4">
            Vercel API Integration Test
          </h1>
          <p className="text-[#94A3B8] text-lg">
            Test your Vercel token integration with the portfolio generation system
          </p>
        </div>

        {/* Vercel Token Status */}
        <Card className="mb-8 bg-white/10 backdrop-blur-sm border-white/20">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <Rocket className="w-5 h-5 mr-2" />
              Vercel Token Status
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <p className="text-[#94A3B8]">
                  Token: <code className="bg-black/20 px-2 py-1 rounded">
                    {getVercelConfig().token.substring(0, 10)}...
                  </code>
                </p>
                <p className="text-[#94A3B8]">
                  Team ID: <code className="bg-black/20 px-2 py-1 rounded">
                    {getVercelConfig().teamId || 'Not configured'}
                  </code>
                </p>
              </div>
              <div>
                <p className="text-[#94A3B8]">
                  Base URL: <code className="bg-black/20 px-2 py-1 rounded">
                    {getVercelConfig().baseUrl}
                  </code>
                </p>
                <p className="text-sm text-[#94A3B8] mt-1">
                  Status: {getVercelConfig().token ? 'Configured' : 'Not Found'}
                </p>
              </div>
            </div>
            <div className="mt-4">
              <Badge variant={getVercelConfig().token ? 'default' : 'destructive'}>
                {getVercelConfig().token ? 'Ready' : 'Error'}
              </Badge>
            </div>
          </CardContent>
        </Card>

        {/* Test Controls */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <Card className="bg-white/10 backdrop-blur-sm border-white/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center">
                <Activity className="w-5 h-5 mr-2" />
                Full Vercel Test Suite
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-[#94A3B8] mb-4">
                Run comprehensive tests for all Vercel operations used in portfolio deployment.
              </p>
              <Button 
                onClick={runVercelTests}
                disabled={isLoading}
                className="w-full bg-[#1E3A8A] hover:bg-[#1E3A8A]/80"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Testing Vercel...
                  </>
                ) : (
                  <>
                    <CheckCircle className="w-4 h-4 mr-2" />
                    Run Full Test Suite
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          <Card className="bg-white/10 backdrop-blur-sm border-white/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center">
                <Settings className="w-5 h-5 mr-2" />
                Custom Project Test
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-[#94A3B8] mb-4">
                Test with your own project name.
              </p>
              <Input
                value={projectName}
                onChange={(e) => setProjectName(e.target.value)}
                placeholder="Enter project name..."
                className="mb-4 bg-white/10 border-white/20 text-white"
              />
              <Button 
                onClick={testCustomProject}
                disabled={isLoading || !projectName.trim()}
                className="w-full bg-[#8B5CF6] hover:bg-[#8B5CF6]/80"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Testing...
                  </>
                ) : (
                  <>
                    <Rocket className="w-4 h-4 mr-2" />
                    Test Custom Project
                  </>
                )}
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Error Display */}
        {error && (
          <Card className="mb-8 bg-red-500/10 backdrop-blur-sm border-red-500/20">
            <CardContent className="pt-6">
              <div className="flex items-center text-red-400">
                <XCircle className="w-5 h-5 mr-2" />
                <span className="font-medium">Vercel Error:</span>
              </div>
              <p className="text-red-300 mt-2">{error}</p>
            </CardContent>
          </Card>
        )}

        {/* Test Results */}
        {testResults && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-white mb-4">
              Test Results
            </h2>

            {/* Projects Listed */}
            {testResults.projectsListed !== undefined && (
              <Card className="bg-white/10 backdrop-blur-sm border-white/20">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <Globe className="w-5 h-5 mr-2" />
                    Projects List
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-[#94A3B8]">
                    <strong className="text-white">Projects Found:</strong> {testResults.projectsListed}
                  </p>
                </CardContent>
              </Card>
            )}

            {/* Deployment Created */}
            {testResults.deploymentCreated && (
              <Card className="bg-white/10 backdrop-blur-sm border-white/20">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <Upload className="w-5 h-5 mr-2" />
                    Deployment Created
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Deployment ID:</strong> {testResults.deploymentCreated.id}
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">URL:</strong> 
                      <a href={testResults.deploymentCreated.url} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:text-blue-300 ml-2">
                        {testResults.deploymentCreated.url}
                      </a>
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Name:</strong> {testResults.deploymentCreated.name}
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Target:</strong> {testResults.deploymentCreated.target}
                    </p>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Deployment Completed */}
            {testResults.deploymentCompleted && (
              <Card className="bg-white/10 backdrop-blur-sm border-white/20">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <CheckCircle className="w-5 h-5 mr-2" />
                    Deployment Completed
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Status:</strong> 
                      <Badge variant="default" className="ml-2">
                        {testResults.deploymentCompleted.state}
                      </Badge>
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Ready At:</strong> {new Date(testResults.deploymentCompleted.readyAt).toLocaleString()}
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Project ID:</strong> {testResults.deploymentCompleted.projectId}
                    </p>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Deployment Status */}
            {testResults.deploymentStatus && (
              <Card className="bg-white/10 backdrop-blur-sm border-white/20">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <Clock className="w-5 h-5 mr-2" />
                    Deployment Status
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">State:</strong> 
                      <Badge variant="default" className="ml-2">
                        {testResults.deploymentStatus.state}
                      </Badge>
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Type:</strong> {testResults.deploymentStatus.type}
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Regions:</strong> {testResults.deploymentStatus.regions.join(', ')}
                    </p>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Domain Configuration */}
            {testResults.domainConfigured && (
              <Card className="bg-white/10 backdrop-blur-sm border-white/20">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <Shield className="w-5 h-5 mr-2" />
                    Custom Domain Configuration
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Domain:</strong> {testResults.domainConfigured.name}
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Verified:</strong> {testResults.domainConfigured.verified ? 'Yes' : 'No'}
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Project ID:</strong> {testResults.domainConfigured.projectId}
                    </p>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Custom Project Test */}
            {testResults.customProjectTest && (
              <Card className="bg-white/10 backdrop-blur-sm border-white/20">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <Settings className="w-5 h-5 mr-2" />
                    Custom Project Test
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Project:</strong> {testResults.customProjectTest.projectName}
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Status:</strong> Success
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">Deployment ID:</strong> {testResults.customProjectTest.deployment.id}
                    </p>
                    <p className="text-[#94A3B8]">
                      <strong className="text-white">URL:</strong> 
                      <a href={testResults.customProjectTest.deployment.url} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:text-blue-300 ml-2">
                        {testResults.customProjectTest.deployment.url}
                      </a>
                    </p>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Success Message */}
            <Card className="bg-green-500/10 backdrop-blur-sm border-green-500/20">
              <CardContent className="pt-6">
                <div className="flex items-center text-green-400">
                  <CheckCircle className="w-5 h-5 mr-2" />
                  <span className="font-medium">All Vercel tests completed successfully!</span>
                </div>
                <p className="text-green-300 mt-2">
                  Your Vercel token is working correctly. Portfolio deployment is ready to use.
                </p>
                <p className="text-green-300 text-sm mt-1">
                  Test completed at: {new Date(testResults.timestamp).toLocaleString()}
                </p>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};

export default VercelTestComponent;
